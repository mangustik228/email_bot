# services/email_manager.py
import time
from typing import Any, Dict

from loguru import logger

from config import Settings
from schemas import EmailCategory

from .gemini_client import GeminiClient
from .imap_client import ImapClient
from .tg_bot import TelegramBot
from .tg_client import TelegramClient

# –í –±—É–¥—É—â–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã
# from .tg_client import TelegramClient

class EmailManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã"""

    def __init__(self, config: Settings):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ config.py
        """
        self.config = config
        self.imap_client = ImapClient(
            server=config.google.server,
            port=config.google.port,
            email_address=config.google.email,
            password=config.google.password
        )
        debug = config.MODE == "DEV"
        self.gemini_client = GeminiClient(api_key=config.gemini.api_key, debug=debug)
        self.tg_bot = TelegramBot(token=config.bot.token, client_id=config.bot.client_id)
        self.tg_client = TelegramClient(config.tg_client.api_id, config.tg_client.api_hash, config.tg_client.bot_name, config.tg_client.session_name)
        self.is_running = False

    def start(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—á—Ç—ã –≤ —Ü–∏–∫–ª–µ"""
        logger.info("–ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—á—Ç—ã")

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ IMAP —Å–µ—Ä–≤–µ—Ä—É
        if not self.imap_client.connect():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ IMAP —Å–µ—Ä–≤–µ—Ä—É. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return

        # –í –±—É–¥—É—â–µ–º –ø–æ–¥–∫–ª—é—á–∞–µ–º –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã
        if not self.tg_bot.start():
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

        self.is_running = True

        try:
            while self.is_running:
                self.process_emails()

                # –û–∂–∏–¥–∞–µ–º 60 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                logger.info("–û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
                time.sleep(60)
        except KeyboardInterrupt:
            logger.info("–†–∞–±–æ—Ç–∞ —Å–∫—Ä–∏–ø—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.stop()

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        self.is_running = False

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å IMAP
        if hasattr(self, 'imap_client'):
            self.imap_client.disconnect()

        # –í –±—É–¥—É—â–µ–º –æ—Ç–∫–ª—é—á–∞–µ–º –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã
        # if hasattr(self, 'tg_bot'):
        #     self.tg_bot.stop()
        # if hasattr(self, 'tg_client'):
        #     self.tg_client.disconnect()

        logger.info("–ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—á—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def process_emails(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º"""
        logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º")

        # –í—ã–±–∏—Ä–∞–µ–º –ø–∞–ø–∫—É "–í—Ö–æ–¥—è—â–∏–µ"
        if not self.imap_client.select_mailbox("INBOX"):
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É INBOX")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
        email_ids = self.imap_client.get_unseen_emails_ids()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(email_ids)} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º")

        if not email_ids:
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ
        for email_id in email_ids:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∏—Å—å–º–æ –ø–æ ID
            email_data = self.imap_client.get_email_by_id(email_id)

            if not email_data:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Å—å–º–æ —Å ID {email_id}")
                continue

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∏—Å—å–º–æ
            self._process_single_email(email_data)

            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
            self.imap_client.mark_as_read(email_id)


    def _process_single_email(self, email_data: Dict[str, Any]):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–∏—Å—å–º–∞

        Args:
            email_data: –¥–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
        """
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞ –æ—Ç HTML –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        from .html_cleaner import EmailCleaner
        cleaned_email = EmailCleaner.clean_email_data(email_data)
        subject = cleaned_email.get('subject', "–ë–µ–∑ —Ç–µ–º—ã")
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ Gemini
        classification = None
        if "pioner" in email_data["from"]:
            classification = EmailCategory.MESSAGE

        if not classification:
            classification = self.gemini_client.classify_email(
                subject=cleaned_email['subject'],
                body=cleaned_email['text_content']
            )

        logger.info(f"–ü–∏—Å—å–º–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫: {classification}")

        if classification in [EmailCategory.MESSAGE, EmailCategory.OTHER, EmailCategory.SUPPORT]:
            self.tg_bot.send_message(self._create_alert_message(cleaned_email, email_data))
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–∏—Å—å–º–µ: {subject}")
        elif classification == EmailCategory.PAYMENT:
            payment_data = self.gemini_client.extract_payment_data(subject, cleaned_email["text_content"])
            sender = cleaned_email.get('sender_name', email_data.get("from", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"))
            self.tg_client.send_payment_data(payment_data, sender)
        elif classification == EmailCategory.NOTICE:
            ... # TODO –ù–∞–¥–æ –ø–æ–∏—Å–∫–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–ø–∏—Å–∞—Ç—å –∏ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è
        else: # classification == EmailCategory.IMPORTANT
            ... # –û—Å—Ç–∞–≤–∏–º –º–µ—Å—Ç–æ, –≤–¥—Ä—É–≥ –ø–æ—Ç–æ–º –∑–∞—Ö–æ—á–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫–∏, –ø–æ–∫–∞ –µ–µ –Ω–µ –±—É–¥–µ—Ç
        logger.info(f"–ü–∏—Å—å–º–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {cleaned_email['subject']}")
        return True  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ


    def _create_alert_message(self, cleaned_email: dict, email_data: dict, provider: str = "gmail"):
        """
        –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram

        Args:
            cleaned_email: –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
            email_data: –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞

        Returns:
            –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
        """
        try:
            sender = cleaned_email.get('sender_name', email_data.get("from", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"))
            subject = cleaned_email.get('subject', email_data.get("subject", '–ë–µ–∑ —Ç–µ–º—ã'))

            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∏—Å–∫ –ø–∏—Å—å–º–∞
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Gmail –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ "yandex" –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            email_link = self._get_email_search_link(email_data, provider)

            # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"<b>üìß –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: {sender}</b>\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—É —Å —Å—Å—ã–ª–∫–æ–π –∏–ª–∏ –±–µ–∑
            if email_link:
                message += f"<a href='{email_link}'>{subject}</a>"
            else:
                message += subject

            return message
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return f"–ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç {email_data.get('from', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}"

    def _get_email_search_link(self, email_data: Dict[str, Any], provider: str = "gmail") -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∏—Å–∫ –ø–∏—Å—å–º–∞ –≤ –ø–æ—á—Ç–æ–≤–æ–º –∫–ª–∏–µ–Ω—Ç–µ

        Args:
            email_data: –¥–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
            provider: –ø–æ—á—Ç–æ–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä ("gmail" –∏–ª–∏ "yandex")

        Returns:
            URL –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∏—Å—å–º–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –ø–∏—Å—å–º–∞
            subject = email_data.get("subject", "")
            if not subject:
                return ""

            # –ö–æ–¥–∏—Ä—É–µ–º —Ç–µ–º—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ URL
            import urllib.parse
            encoded_subject = urllib.parse.quote_plus(subject)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            if provider.lower() == "gmail":
                return f"https://mail.google.com/mail/u/0/#search/{encoded_subject}"
            elif provider.lower() == "yandex":
                return f"https://mail.yandex.ru/#search?request={encoded_subject}"
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}")
                return ""

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–∏—Å–∫ –ø–∏—Å—å–º–∞: {e}")
            return ""


    def _get_message_id(self, email_data: dict) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç Message-ID –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–∏—Å—å–º–∞

        Args:
            email_data: –¥–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞

        Returns:
            Message-ID –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —É–∂–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if email_data.get('message_id'):
                return email_data['message_id']

            # –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ raw_message
            if 'raw_message' in email_data and hasattr(email_data['raw_message'], 'get'):
                message_id = email_data['raw_message'].get('Message-ID')
                if message_id:
                    return message_id

            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if 'raw_message' in email_data:
                for name, value in email_data['raw_message'].items():
                    if name.lower() == 'message-id':
                        return value

            # –ù–µ –Ω–∞—à–ª–∏ Message-ID
            return ''
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ Message-ID: {e}")
            return ''